# api/support_api.py
from flask import Flask, request, jsonify
from flask_cors import CORS
import sys
import os

# モデルのインポートのためにパスを追加
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from models.support_models import (
    add_support_transaction,
    get_creator_earnings, 
    get_support_history,
    get_user_points,
    update_user_points
)

app = Flask(__name__)
CORS(app)

@app.route('/api/support/send', methods=['POST'])
def send_support():
    """支援を送る"""
    try:
        data = request.get_json()
        user_id = data.get('user_id')
        creator_id = data.get('creator_id')
        points_amount = data.get('points_amount')
        message = data.get('message', '')
        
        # 入力値検証
        if not all([user_id, creator_id, points_amount]):
            return jsonify({'error': '必要な情報が不足しています'}), 400
            
        if points_amount <= 0:
            return jsonify({'error': 'ポイント数は1以上である必要があります'}), 400
        
        # ユーザーの現在のポイントを確認
        current_points = get_user_points(user_id)
        if current_points < points_amount:
            return jsonify({'error': 'ポイントが不足しています'}), 400
        
        # ポイントを減算
        new_points = current_points - points_amount
        if not update_user_points(user_id, new_points):
            return jsonify({'error': 'ポイント更新に失敗しました'}), 500
        
        # 支援取引を記録
        if add_support_transaction(user_id, creator_id, points_amount, message):
            return jsonify({
                'message': '支援が完了しました',
                'remaining_points': new_points
            }), 200
        else:
            # 失敗した場合はポイントを戻す
            update_user_points(user_id, current_points)
            return jsonify({'error': '支援の記録に失敗しました'}), 500
            
    except Exception as e:
        return jsonify({'error': f'サーバーエラー: {str(e)}'}), 500

@app.route('/api/support/history/<int:user_id>', methods=['GET'])
def get_user_support_history(user_id):
    """ユーザーの支援履歴を取得"""
    try:
        limit = request.args.get('limit', 50, type=int)
        history = get_support_history(user_id=user_id, limit=limit)
        
        return jsonify({
            'history': history,
            'count': len(history)
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'履歴取得エラー: {str(e)}'}), 500

@app.route('/api/creator/<int:creator_id>/earnings', methods=['GET'])
def get_creator_earnings_api(creator_id):
    """クリエイターの収益情報を取得"""
    try:
        earnings = get_creator_earnings(creator_id)
        if earnings is not None:
            return jsonify(earnings), 200
        else:
            return jsonify({'error': '収益情報の取得に失敗しました'}), 500
            
    except Exception as e:
        return jsonify({'error': f'収益情報取得エラー: {str(e)}'}), 500

@app.route('/api/creator/<int:creator_id>/support-history', methods=['GET'])
def get_creator_support_history(creator_id):
    """クリエイターが受けた支援履歴を取得"""
    try:
        limit = request.args.get('limit', 50, type=int)
        history = get_support_history(creator_id=creator_id, limit=limit)
        
        return jsonify({
            'history': history,
            'count': len(history)
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'支援履歴取得エラー: {str(e)}'}), 500

@app.route('/api/user/<int:user_id>/points', methods=['GET'])
def get_user_points_api(user_id):
    """ユーザーのポイント残高を取得"""
    try:
        points = get_user_points(user_id)
        return jsonify({'points': points}), 200
        
    except Exception as e:
        return jsonify({'error': f'ポイント取得エラー: {str(e)}'}), 500

@app.route('/api/support/recent', methods=['GET'])
def get_recent_support():
    """最近の支援履歴を取得"""
    try:
        limit = request.args.get('limit', 20, type=int)
        history = get_support_history(limit=limit)
        
        return jsonify({
            'history': history,
            'count': len(history)
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'最近の支援履歴取得エラー: {str(e)}'}), 500

@app.route('/api/support/stats', methods=['GET'])
def get_support_stats():
    """支援統計情報を取得"""
    try:
        import sqlite3
        
        conn = sqlite3.connect('fan_platform.db')
        cursor = conn.cursor()
        
        # 統計情報を取得
        cursor.execute('''
            SELECT 
                COUNT(*) as total_transactions,
                SUM(points_amount) as total_points,
                COUNT(DISTINCT user_id) as total_supporters,
                COUNT(DISTINCT creator_id) as supported_creators
            FROM support_transactions
        ''')
        
        stats = cursor.fetchone()
        conn.close()
        
        return jsonify({
            'total_transactions': stats[0] or 0,
            'total_points': stats[1] or 0,
            'total_supporters': stats[2] or 0,
            'supported_creators': stats[3] or 0
        }), 200
        
    except Exception as e:
        return jsonify({'error': f'統計情報取得エラー: {str(e)}'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """ヘルスチェック"""
    return jsonify({'status': 'OK', 'service': 'Support API'}), 200

if __name__ == '__main__':
    print("🚀 支援API サーバーを起動中...")
    print("📡 API エンドポイント:")
    print("  POST /api/support/send - 支援を送る")
    print("  GET  /api/support/history/<user_id> - ユーザー支援履歴")
    print("  GET  /api/creator/<creator_id>/earnings - クリエイター収益")
    print("  GET  /api/creator/<creator_id>/support-history - クリエイター支援履歴")
    print("  GET  /api/user/<user_id>/points - ユーザーポイント残高")
    print("  GET  /api/support/recent - 最近の支援履歴")
    print("  GET  /api/support/stats - 支援統計情報")
    print("  GET  /health - ヘルスチェック")
    print("🌐 http://localhost:5002")
    
    app.run(debug=True, port=5002)
